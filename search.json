[
  {
    "objectID": "useful.html",
    "href": "useful.html",
    "title": "Useful",
    "section": "",
    "text": "Here are some books that have helped me and I refer to often (links attached) some of these might be very useful to you as well:\n\n\nProbability and Statistics with Examples using R by Athreya, Tanner, Sarkar\nIntroduction to Statistical Learning in R/Python by Hastie, Tibshirani, James, Witten, Taylor\nThe Elements of Statistical Learning by Hastie, Tibshirani\nMining of Massive Datasets by Leskovec, Ullman, Rajaraman\nINtrodution to Information Retrieval by Manning, Raghavan, Schütze\nAdvanced Data Analysis by Cosma Rohilla Shalizi\nBooks by Charu Aggarwal, namely:\n\nData Mining\nNeural Networks and Deep Learning\nRecommender Systems\n\nDatabase System Concepts by Silberschatz, Korth, Sudarshan\n\n\n\n\n\n\n\n\nNote\n\n\n\nI have not read them cover to cover, just some topics or when in need while doing courses in my university or some self-learning. List also includes books that I’ve marked to-do."
  },
  {
    "objectID": "useful.html#books",
    "href": "useful.html#books",
    "title": "Useful",
    "section": "",
    "text": "Here are some books that have helped me and I refer to often (links attached) some of these might be very useful to you as well:\n\n\nProbability and Statistics with Examples using R by Athreya, Tanner, Sarkar\nIntroduction to Statistical Learning in R/Python by Hastie, Tibshirani, James, Witten, Taylor\nThe Elements of Statistical Learning by Hastie, Tibshirani\nMining of Massive Datasets by Leskovec, Ullman, Rajaraman\nINtrodution to Information Retrieval by Manning, Raghavan, Schütze\nAdvanced Data Analysis by Cosma Rohilla Shalizi\nBooks by Charu Aggarwal, namely:\n\nData Mining\nNeural Networks and Deep Learning\nRecommender Systems\n\nDatabase System Concepts by Silberschatz, Korth, Sudarshan\n\n\n\n\n\n\n\n\nNote\n\n\n\nI have not read them cover to cover, just some topics or when in need while doing courses in my university or some self-learning. List also includes books that I’ve marked to-do."
  },
  {
    "objectID": "useful.html#my-notes",
    "href": "useful.html#my-notes",
    "title": "Useful",
    "section": "My notes",
    "text": "My notes\nI will add my notes here soon."
  },
  {
    "objectID": "posts/2401_ohlcv_viz_py/index.html",
    "href": "posts/2401_ohlcv_viz_py/index.html",
    "title": "Candlestick Plotting with Python Libraries",
    "section": "",
    "text": "This post was written primarily because I wanted to learn how quarto’s computations work along with interactivity of Bokeh and Plotly in python, also found out that as of now we cannot contorl the size of output images produced with matplotlib (hence them appearing large in this post)."
  },
  {
    "objectID": "posts/2401_ohlcv_viz_py/index.html#introduction",
    "href": "posts/2401_ohlcv_viz_py/index.html#introduction",
    "title": "Candlestick Plotting with Python Libraries",
    "section": "Introduction",
    "text": "Introduction\nIn this post, we will be looking at creating candlestick charts, which are integral to traders’ daily routines, using Python libraries such as Mplfinance, Plotly and Bokeh, and look at customizing the plots, change themes and tweak some colors.\nAs this post is written on Quarto, it enables viewers to interact with the output plots. You’ll be able to pan and zoom with the charts created with plotly and bokeh!\nSo, now lets head on to fetch our data first."
  },
  {
    "objectID": "posts/2401_ohlcv_viz_py/index.html#getting-data",
    "href": "posts/2401_ohlcv_viz_py/index.html#getting-data",
    "title": "Candlestick Plotting with Python Libraries",
    "section": "Getting Data",
    "text": "Getting Data\nWe will make use of the yfinance library. Let’s fetch the Open-High-Low-Close and Volume data for Apple (AAPL) for the past 5 months.\nOur data looks like this:\n\n\nCode\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nimport yfinance as yf\nimport pandas as pd\n\n\ndata = yf.download(\"AAPL\", period=\"5mo\",auto_adjust=True)\ndata.head()\n\n\n[*********************100%%**********************]  1 of 1 completed\n\n\n\n\n\n\n\n\n\n\nOpen\nHigh\nLow\nClose\nVolume\n\n\nDate\n\n\n\n\n\n\n\n\n\n2024-02-06\n186.369081\n188.812642\n186.279321\n188.802673\n43490800\n\n\n2024-02-07\n190.139164\n190.548090\n188.114498\n188.912399\n53439000\n\n\n2024-02-08\n188.892437\n189.042037\n186.857803\n187.825256\n40962000\n\n\n2024-02-09\n188.394466\n189.732663\n187.745353\n188.594208\n45155200\n\n\n2024-02-12\n188.164784\n188.414445\n186.536987\n186.896500\n41781900"
  },
  {
    "objectID": "posts/2401_ohlcv_viz_py/index.html#plots",
    "href": "posts/2401_ohlcv_viz_py/index.html#plots",
    "title": "Candlestick Plotting with Python Libraries",
    "section": "Plots",
    "text": "Plots\nNow we will head straight into plotting. We will start with mplfinance, a special module for finance charts of matplotlib.\n\nmplfinance\nCreating candlestick charts with mplfinance is a simple one line code:\n\n\nCode\nimport mplfinance as mpf\n\nmpf.plot(data, type=\"candle\", volume=True, style=\"yahoo\",\n         figsize=(6,3),title=\"AAPL Candlestick with Mplfinance\",\n        ylabel=\"Price [USD]\")\n\n\n\n\n\n\n\n\n\nThis plot uses the “yahoo” style. We can check the available style using the command mpf.available_styles(). Now let us look at a few other available styles below:\n\n\nCode\nmc_list = [\"binance\",\"blueskies\",\"starsandstripes\",\"brasil\"]\n\nfig = mpf.figure(figsize=(6,6))\nax_dict = {}\n\nfor i,st in enumerate(mc_list):\n    ax_dict[i]=fig.add_subplot(2,2,i+1, style=st)\n    mpf.plot(data[:50], type =\"candle\", ax=ax_dict[i], axtitle=(st),xrotation=0)\n\n\n\n\n\n\n\n\n\nAnd now we will tweak and play with the candle colors and background. First we will set the base mplstyle to dark_background (for reference, check here). Then we will set marketcolors for the chart:\n\n\nCode\nmc = mpf.make_marketcolors(up=\"g\",down=\"r\",inherit=True)\ns = mpf.make_mpf_style(base_mpl_style=\"dark_background\",marketcolors=mc)\nmpf.plot(data, type=\"candle\", volume=True, style=s,\n         figsize=(6,3),title=\"Customised Dark theme plot on mplfinance\",\n        ylabel=\"Price [USD]\")\n\n\n\n\n\n\n\n\n\nFor looking further stye changes using mplfinance, one might check their example notebook\nWe will move ahead and try hands on some interactive plotting libraries.\n\n\nPlotly\nPlotly is perhaps the most used interactive visualization library in python. It offers a great deal of customization. With Plotly, we will make two types of charts, OHLC and Volume plotted together in first one, separate in the next.\n\n\nCode\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\nfig.add_trace(go.Candlestick(x=data.index, open=data[\"Open\"],\n                              high=data[\"High\"], low=data[\"Low\"],\n                             close=data[\"Close\"], name = \"OHLC\"), secondary_y=False)\n\nfig.add_trace(go.Bar(x=data.index, y=data['Volume'], opacity=0.3,\n                     name= \"Volume\"), secondary_y=True)\n\nfig.update_layout(title=\"AAPL Candlestick with Plotly\", width=900, height=400)\nfig.update_yaxes(title=\"Price [USD]\", secondary_y=False, showgrid=True)\nfig.update_yaxes(title=\"Volume\", secondary_y=True, showgrid=False)\n\nfig.show()\n\n\n                                                \n\n\nIn the next one, we hide the range slider for better viewing and separate the volume bar chart:\n\n\nCode\nfig = make_subplots(rows=2, cols=1, shared_xaxes=True, vertical_spacing=0.05, row_width=[0.2, 0.7])\n\nfig.add_trace(go.Candlestick(x=data.index, open=data[\"Open\"],\n                              high=data[\"High\"], low=data[\"Low\"],\n                             close=data[\"Close\"], name = \"OHLC\"), row=1, col=1)\n\nfig.add_trace(go.Bar(x=data.index, y=data['Volume'], opacity=0.3,\n                     name= \"Volume\"), row=2, col=1)\n\nfig.update_layout(title=\"AAPL Candlestick with Plotly\", width=900, height=500)\n\nfig.update(layout_xaxis_rangeslider_visible=False)\nfig.show()\n\n\n                                                \n\n\nPlotly as well offers multiple themes and customizations, for now will use the dark theme and just change the colors of volume bars for the first plot.\n\n\nCode\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\nfig.add_trace(go.Candlestick(x=data.index, open=data[\"Open\"],\n                              high=data[\"High\"], low=data[\"Low\"],\n                             close=data[\"Close\"], name = \"OHLC\"), secondary_y=False)\n\nfig.add_trace(go.Bar(x=data.index, y=data['Volume'], opacity=0.3,\n                     name= \"Volume\", marker_color=\"gray\"), secondary_y=True)\n\nfig.update_layout(title=\"AAPL Candlestick with Plotly\", width=900, height=500, xaxis={\"rangeslider\":{\"visible\":False}}, template=\"plotly_dark\")\nfig.update_yaxes(title=\"Price [USD]\", secondary_y=False, showgrid=True)\nfig.update_yaxes(title=\"Volume\", secondary_y=True, showgrid=False)\n\nfig.show()\n\n\n                                                \n\n\n\n\nBokeh plot\nQuoting:\n\nBokeh is an interactive visualization library for modern web browsers. It provides elegant, concise construction of versatile graphics, and affords high-performance interactivity over large or streaming datasets. Bokeh can help anyone who would like to quickly and easily make interactive plots, dashboards, and data applications.\n\nBokeh additionally has great documentation and user guide. Now let’s look at a candlestick chart created using Bokeh:\n\n\nCode\nfrom bokeh.layouts import column\nfrom bokeh.plotting import figure, show, output_notebook\nfrom bokeh.models import ColumnDataSource, RangeTool, BoxAnnotation, HoverTool\nfrom bokeh.resources import INLINE\n\n\noutput_notebook(resources=INLINE)\n\ninc= data.Close &gt; data.Open\ndec = data.Open &gt; data.Close\nTOOLS = \"pan,wheel_zoom,box_zoom,reset,save\"\nwidth_set = pd.Timedelta(\"16H\")\n\n\nfig = figure(x_axis_type=\"datetime\", tools=TOOLS, width=900, height=350,\n             title=\"AAPL Candlestick with Bokeh\")\n\nfig.segment(data.index, data.High, data.index, data.Low, color=\"black\")\nfig.vbar(data.index[dec], width_set, data.Open[dec], data.Close[dec], color=\"red\")\nfig.vbar(data.index[inc], width_set, data.Open[inc], data.Close[inc], color=\"green\")\nfig.yaxis.axis_label=\"Price [USD]\"\n\nvol = figure(x_axis_type=\"datetime\", tools=TOOLS, width=900, height=150, x_range=fig.x_range)\nvol.vbar(data.index, width=width_set, top=data.Volume, fill_color=\"grey\", alpha=0.5)\nvol.yaxis.axis_label=\"Volume\"\n\nshow(column(fig,vol))\n\n\n    \n    \n        \n        Loading BokehJS ...\n    \n\n\n\n\n\n\n  \n\n\n\n\n\nGreat! We will now change to dark theme. Check out : bokeh themes.\n\n\nCode\nfrom bokeh.plotting import curdoc\nfrom bokeh.themes import Theme\noutput_notebook(resources=INLINE)\n\ninc= data.Close &gt; data.Open\ndec = data.Open &gt; data.Close\nTOOLS = \"pan,wheel_zoom,box_zoom,reset,save\"\nwidth_set = pd.Timedelta(\"16H\")\n\n\nfig = figure(x_axis_type=\"datetime\", tools=TOOLS, width=900, height=400,\n             title=\"AAPL Candlestick with Bokeh\")\n\nfig.segment(data.index, data.High, data.index, data.Low, color=\"white\")\nfig.vbar(data.index[dec], width_set, data.Open[dec], data.Close[dec], color=\"red\")\nfig.vbar(data.index[inc], width_set, data.Open[inc], data.Close[inc], color=\"green\")\nfig.yaxis.axis_label=\"Price [USD]\"\n\ndoc = curdoc()\ndoc.theme = \"dark_minimal\"\ndoc.add_root(fig)\nshow(fig)\n\n\n    \n    \n        \n        Loading BokehJS ...\n    \n\n\n\n\n\n\n  \n\n\n\n\n\nThat really looks good. If you are going through the code here, you can see how simple it would be to change the colors of bars. One can further add tooltips that will display the OHLC data on hovering over the candles.\nOne might further look at libraries like Altair, ggplot. One great library that I just found while writing this post is Holoviews\nHave fun plotting!"
  },
  {
    "objectID": "gallery.html",
    "href": "gallery.html",
    "title": "Gallery",
    "section": "",
    "text": "This page contains random clicks (I mean it) with my smartphone that has 5+ years of experience dealing with me.\n\n\n\n\nThe sky from a beach in evening.\n\n\n\n\n\nCorridor of an old temple built around 1600 CE.\n\n\n\n\n\nSome random tower type structure\n\n\n\n\n\n\nThe sky from a beach in evening.\nCorridor of an old temple built around 1600 CE.\nSome random tower type structure"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "My blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nEncoding: ASCII, UCS, UTF\n\n\n\n\n\nThis blogs talks about various encoding methods developed and how the web pages use them.\n\n\n\n\n\nJune 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nCandlestick Plotting with Python Libraries\n\n\n\n\n\nCreate interactive Candlestick charts of OHLCV data obtained from yfinance library using python libraries.\n\n\n\n\n\nJanuary 26, 2024\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Soumya Mukhopadhyay",
    "section": "",
    "text": "Here is an undergrad delving deep in the realms of machine learning and data science. I am interested in teaching and have been a course mentor for an introductory statistics course in the past. I like to learn new things, seeking knowledge in domains besides tech as well whenever time and circumstances allow me.\nI am also dedicated to helping local businesses grow by enhancing their digital presence and conducting data analytics to identify growth opportunities.\n\n\nIndian Institute of Technology, Madras\nBachelor of Science (B.S.) in Data Science and Applications | 2022- 2026 (expected)\nCoursework : Machine Learning Techniques, Business Data Management, Tools in Data Science, Programming Concepts in Java, Modern Application Development, Data Structures and Algorithms"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Soumya Mukhopadhyay",
    "section": "",
    "text": "Indian Institute of Technology, Madras\nBachelor of Science (B.S.) in Data Science and Applications | 2022- 2026 (expected)\nCoursework : Machine Learning Techniques, Business Data Management, Tools in Data Science, Programming Concepts in Java, Modern Application Development, Data Structures and Algorithms"
  },
  {
    "objectID": "posts/2406_encoding/index.html",
    "href": "posts/2406_encoding/index.html",
    "title": "Encoding: ASCII, UCS, UTF",
    "section": "",
    "text": "Machines only understand bits, 1s and 0s. Hence, any languages humans use need to be translated into bits somehow for computers to store and manipulate it as needed. Encodings are developed to specify a standard of such translation, that will allow users to read and write data consistently regardless of difference in software or hardware and is hence an fundamental concept in computing. Every character across different languages and scripts are assigned a code points which is in turn converted into bits. In this post we look at a few major encodings, like the ASCII, UCS and UTF.\nFirst let us take a simple example, consider character set \\(\\{a,b,c,d,e,f,g\\}\\). Suppose we have to encode these characters (and absolutely nothing else). We assign code points as integers from 0-6. Now, to encode 7 characters we need at leas 3 bits (lowest exponent of 2 greater than or equal to 7). Then an encoding can be made as follows:\n\n\n\nCharacter\na\nb\nc\nd\ne\nf\ng\n\n\n\n\nCode point\n0\n1\n2\n3\n4\n5\n6\n\n\nBinary\n000\n001\n010\n011\n100\n101\n110"
  },
  {
    "objectID": "posts/2406_encoding/index.html#introduction",
    "href": "posts/2406_encoding/index.html#introduction",
    "title": "Encoding: ASCII, UCS, UTF",
    "section": "",
    "text": "Machines only understand bits, 1s and 0s. Hence, any languages humans use need to be translated into bits somehow for computers to store and manipulate it as needed. Encodings are developed to specify a standard of such translation, that will allow users to read and write data consistently regardless of difference in software or hardware and is hence an fundamental concept in computing. Every character across different languages and scripts are assigned a code points which is in turn converted into bits. In this post we look at a few major encodings, like the ASCII, UCS and UTF.\nFirst let us take a simple example, consider character set \\(\\{a,b,c,d,e,f,g\\}\\). Suppose we have to encode these characters (and absolutely nothing else). We assign code points as integers from 0-6. Now, to encode 7 characters we need at leas 3 bits (lowest exponent of 2 greater than or equal to 7). Then an encoding can be made as follows:\n\n\n\nCharacter\na\nb\nc\nd\ne\nf\ng\n\n\n\n\nCode point\n0\n1\n2\n3\n4\n5\n6\n\n\nBinary\n000\n001\n010\n011\n100\n101\n110"
  },
  {
    "objectID": "posts/2406_encoding/index.html#ascii",
    "href": "posts/2406_encoding/index.html#ascii",
    "title": "Encoding: ASCII, UCS, UTF",
    "section": "ASCII",
    "text": "ASCII\nASCII (American Standard Code for Information Interchange) was created by ANSI (American National Standards Institute) in 1963 to standardize encoding methods, making it easier to exchange files between different computers and devices. ASCII uses 7-bits allowing fo 128 unique values to be encoded (0 to 127). Each value is assigned an integer code point and includes control characters and printable characters.\n\n\n\nTable 1: ASCII\n\n\n\n\n\n\n\n(a) Character set\n\n\n\n\n\nRange\nType\nExamples\n\n\n\n\n0-31\nControl chars\nNULL, SOH, STX, ETX, etc.\n\n\n32-126\nPrintable chars\nSpace, !, A-Z, a-z, etc.\n\n\n127\nControl chars\nDEL\n\n\n\n\n\n\n\n\n\n\n\n(b) Examples\n\n\n\n\n\nCharacter\nCode point\nBinary\n\n\n\n\n‘A’\n65\n1000001\n\n\n‘space’\n32\n0100000\n\n\n‘Ctrl-C’\n3\n0000011\n\n\n‘$’\n36\n0100100\n\n\n\n\n\n\n\n\n\n\n\n\nExtended ASCII\nTo include more characters many versions were developed using another bit (8 bits, allowing 0-255), which loosely is known as the “Extended ASCII”. However, one must note that “Extended ASCII” does not refer to any particular encoding as there was no unified standard, some versions used the 8th bit for accented european letters such as ISO-8859-1 (Latin-1) or even entirely different scripts such as ISO-8859-5 for Cyrillic. And even though the character limit had increased, development of many versions led to incompatibility issues as text encoded in one version could not be interpreted in a system with another version.\nThe problems thus posed, demanded a unified encoding that could cover all languages and scripts, including potentially extinct ones and even future languages. This led to development of Unicode encoding which uses upto 32 bits, allowing maximum of over 4 billion characters to encode."
  },
  {
    "objectID": "posts/2406_encoding/index.html#unicode",
    "href": "posts/2406_encoding/index.html#unicode",
    "title": "Encoding: ASCII, UCS, UTF",
    "section": "Unicode",
    "text": "Unicode\nUnicode is said to be a global encoding standard developed by The Unicode Consortium that provides a very LARGE, single character set of including all languages, scripts, emojis and even ancient ones like egyptian hieroglyphs. It can handle 1,114,112 different characters and as of now has 289,460 designated (version 15.1, source). The Unicode standard encompasses the Universal Character Set (UCS) and defines two series of encoding methods: UCS encodings and UTF encodings, ensuring compatibility, no matter the platform, program, language and leveraging techniques to increase efficiency.\n\nUCS encoding\nUCS (Universal character set) forms basis of Unicode, which was developed to provide a unified encoding for all characters. In UCS each character is assigned a unique hexadecimal code point. UCS-2 and UCS-4 are two encodings that are used to represent UCS characters: (Note when I say (and its common), “UCS”, it refers to the character set and when we “UCS encodings”, it refers to UCS-2, UCS-4.)\n\nUCS-2 : Uses 2 bytes (16 btis) per character and covers 65,536 code points. This covers the BMP - Basic Multilingual Plane which is the first plane of Unicode character set comprising of commonly used characters and most modern scripts.\nUCS-4 : Uses 4 bytes (32-bits) per character, expanding the maximum possible codepoints to more than 4 billion (which as of now seems more than enough).\n\n\n\n\nTable 2: UCS-2 and UCS-4 examples\n\n\n\n\n\n\n\n\n\n\n\nCharacter\nCode point (Hex)\nUCS-2 Binary\nUCS-4 Binary\n\n\n\n\nA\n0041\n00000000 01000001\n00000000 00000000 00000000 01000001\n\n\n€ (Euro sign)\n20AC\n00100000 10101100\n00000000 00000000 00100000 10101100\n\n\n𐍈 (Gothic hwair)\n10348\nN/A\n00000000 00010000 00110100 10001000\n\n\n\n\n\n\nTo convert a character from UCS-2 to UCS-4, one needs to aprepend zeroes to UCS-2 binary. Now if one uses only a fixed range of characters, encoding in UCS-2 or UCS-4 as they are of fixed length binary will be consuming a lot of unnecessary space. Hence the development of UTF (as far as I understand-)…\n\n\nUTF\nUTF (Unicode Transformation Format) defines encoding formats : UTF-8, UTF-16 and UTF-32 that map code points from the UCS set to bits. UTF has variable length encoding which is more efficient than earlier described UCS encodings.\n\nUTF-8 : It covers entire Unicode character set and is of variable length encoding using 1 to 4 bytes per character and is backwards compatible with ASCII that is, for first 128 characters, UTF-8 uses the same mapping as ASCII. It is highly space efficient andis most used (over 98% in the web) encoding.\nUTF-16 : Uses 2 bytes for encoding characters in BMP and 4 bytes for characters outside BMP using “surrogate pairs” (pairs of 16-bit code units).\nUTF-32 : Fixed use of 4 bytes for all characters (simplifying indexing), functionally equivalent to UCS-4. Less commonly used due its more space requirement but still used where indexing matters more.\n\n\n\n\nTable 3: UTF-8 and UTF-16 examples\n\n\n\n\n\n\n\n\n\n\n\nCharacter\nCode point (Hex)\nUTF-8 Binary\nUTF-16 Binary\n\n\n\n\nA\n0041\n01000001\n00000000 01000001\n\n\n€ (Euro sign)\n20AC\n11100010 10000010 10101100\n00100000 10101100\n\n\n𐍈 (Gothic hwair)\n10348\n11110000 10010000 10001101 10001000\n11011000 00000000 11011100 10001000"
  },
  {
    "objectID": "posts/2406_encoding/index.html#meta-charset",
    "href": "posts/2406_encoding/index.html#meta-charset",
    "title": "Encoding: ASCII, UCS, UTF",
    "section": "meta charset= “” ?",
    "text": "meta charset= “” ?\nIf you’ve been into web development even a little you have seen this tag in your html document, most likely as your first head tag. We use the tag &lt;meta charset=\"utf-8\"&gt; to define the encoding. But how can your ead HTML file without knowing before hand what encoding it uses?\nHTML5 standard requires you to conform with certain restrictions such as :\n\nThe element containing the character encoding declaration must be serialized completely within the first 1024 bytes of the document. (source)\n\nThis limit earlier used to be 512 bytes. When this meta tag is parsed, the browser is going to stop and start over with the specified encoding. Until this tag, a default uncoding is used which is mostly ISO-8859-1. Also it is recommended to always use utf-8 because of all the reasons above."
  },
  {
    "objectID": "posts/2406_encoding/index.html#summary",
    "href": "posts/2406_encoding/index.html#summary",
    "title": "Encoding: ASCII, UCS, UTF",
    "section": "Summary",
    "text": "Summary\nASCII, the first major standard encoding uses 7 bits that well worked with the English texts. However, to inlcude other languages and scripts, 8-bit encodings were developed with multiple versions that are commonly referred to as Extended ASCII. These versions suffered from incompatibility during data exchanges and from system differences. Then comes Unicode, a unified global standard set to include all languages, ancient, current and potential future ones addressing the issues faced earlier and encoding formats with more bits were developed : UCS-2 and UCS-4, which soon became obsolete as UTF formats took over, because of its high efficiency, thanks to variable length encoding, ability to span entire Unicode set and compatibility with ASCII. UTF-8 is the most used encoding and you should, as well, use it while defining &lt;meta charset='utf-8'&gt; as the first line of your head tag in HTML document."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Projects will be added here soon.\n\n\n\n\n\n\n\n\n\n\n\n\nThis is a test project\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  }
]